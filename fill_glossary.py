from main import SessionLocal, GlossaryTerm

# Подключение к базе данных
db = SessionLocal()

terms = [
    {"name": "ARIMA", "description": "Метод анализа временных рядов, объединяющий авторегрессию, интеграцию и скользящее среднее для прогнозирования."},
    {"name": "LSTM", "description": "Тип рекуррентной нейронной сети, запоминающий долгосрочные зависимости для обработки временных рядов."},
    {"name": "GRU", "description": "Упрощенная версия LSTM, предназначенная для моделирования временных зависимостей с меньшей вычислительной нагрузкой."},
    {"name": "DWT", "description": "Дискретное вейвлет-преобразование для разделения временных рядов на низко- и высокочастотные компоненты."},
    {"name": "MAPE", "description": "Средняя абсолютная процентная ошибка, используемая для оценки точности моделей."},
    {"name": "R²", "description": "Метрика, характеризующая долю дисперсии, объясняемую моделью."},
    {"name": "Прогнозирование по аналогии", "description": "Метод прогнозирования, опирающийся на сходства между текущими и прошлыми событиями."},
    {"name": "TensorFlow", "description": "Фреймворк для разработки моделей машинного обучения, широко используемый в глубоких нейронных сетях."},
    {"name": "Keras", "description": "Высокоуровневый API для TensorFlow, упрощающий построение моделей машинного обучения."},
    {"name": "SQL", "description": "Язык запросов, используемый для взаимодействия с реляционными базами данных."},
    {"name": "SQLite", "description": "Легковесная база данных, часто используемая в небольших приложениях."},
    {"name": "API", "description": "Программный интерфейс, обеспечивающий взаимодействие между различными приложениями."},
    {"name": "HTTP", "description": "Протокол для передачи данных в сети, используемый в веб-API."},
    {"name": "JSON", "description": "Формат обмена данными, используемый в API для передачи структурированных данных."},
    {"name": "PyWavelets", "description": "Библиотека для работы с вейвлетами, используемая для обработки временных рядов."},
    {"name": "Grafana", "description": "Инструмент для визуализации данных и мониторинга в реальном времени."},
    {"name": "Scikit-learn", "description": "Библиотека Python для машинного обучения и обработки данных."},
    {"name": "Statsmodels", "description": "Библиотека Python для построения статистических моделей."},
    {"name": "Временные ряды", "description": "Последовательность наблюдений, упорядоченная по времени, используемая для анализа тенденций."},
    {"name": "Кэширование", "description": "Процесс временного хранения данных для ускорения доступа."},
    {"name": "Kaggle", "description": "Платформа для проведения соревнований по анализу данных и предоставления наборов данных."},
    {"name": "Веб-аналитика", "description": "Процесс измерения, сбора и анализа данных о посещаемости веб-сайтов."},
    {"name": "Машинное обучение", "description": "Раздел искусственного интеллекта, связанный с обучением моделей для прогнозирования данных."},
    {"name": "Трафик веб-сайта", "description": "Количество посетителей и просмотров страниц веб-ресурса."},
    {"name": "Энсамблевое обучение", "description": "Метод, объединяющий несколько моделей для повышения точности прогнозирования."},
    {"name": "Средняя абсолютная ошибка (MAE)", "description": "Метрика, оценивающая среднюю разницу между предсказанными и фактическими значениями."},
    {"name": "Grafana Loki", "description": "Инструмент для логирования, тесно интегрированный с Grafana."},
    {"name": "Prometheus", "description": "Система мониторинга и сбора метрик с различных сервисов."},
    {"name": "JSON Schema", "description": "Формат для описания структуры JSON-документов."},
    {"name": "Вейвлет-анализ", "description": "Метод анализа сигналов и временных рядов для выявления скрытых закономерностей."},
    {"name": "Облачные вычисления", "description": "Модель предоставления вычислительных ресурсов через интернет."}
]

for term in terms:
    db_term = db.query(GlossaryTerm).filter(GlossaryTerm.name == term["name"]).first()
    if not db_term:
        new_term = GlossaryTerm(name=term["name"], description=term["description"])
        db.add(new_term)

db.commit()
db.close()
print("DB filled!")